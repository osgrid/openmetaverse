/*
 * Copyright (c) Open Metaverse Foundation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;
using System.Collections.Generic;
using System.Threading;
using log4net;
using OpenMetaverse.StructuredData;

namespace Simian.Protocols.WebSocket
{
    /// <summary>
    /// This is triggered whenever a packet of a registered type is received
    /// </summary>
    public delegate void MessageCallback(WSAgent agent, OSDMap message);

    /// <summary>
    /// Registers, unregisters, and fires events generated by incoming messages
    /// </summary>
    public class MessageEventDictionary
    {
        /// <summary>
        /// Object that is passed to worker threads in the ThreadPool for
        /// firing message callbacks
        /// </summary>
        private struct MessageCallbackWrapper
        {
            /// <summary>Callback to fire for this message</summary>
            public MessageCallback Callback;
            /// <summary>Message that needs to be processed</summary>
            public OSDMap Message;
            /// <summary>Agent this message was received from</summary>
            public WSAgent Agent;
        }

        private static readonly ILog m_log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name);

        /// <summary>Maps event types to callbacks</summary>
        private Dictionary<string, MessageCallback> m_eventTable = new Dictionary<string,MessageCallback>();
        /// <summary>Used to asynchronously schedule events</summary>
        private IScheduler m_scheduler;
        /// <summary>Limits the total number of packet handling threads running
        /// simultaneously</summary>
        private Semaphore m_eventPool;

        /// <summary>
        /// Default constructor
        /// </summary>
        public MessageEventDictionary(IScheduler scheduler)
        {
            m_scheduler = scheduler;

            // TODO: Make this a config file option as well
            int maxHandlingThreads = scheduler.GetAvailableWorkers() - 2;
            m_log.Debug("Setting the maximum packet handling thread count to " + maxHandlingThreads);
            m_eventPool = new Semaphore(maxHandlingThreads, maxHandlingThreads);
        }

        /// <summary>
        /// Register an event handler
        /// </summary>
        /// <param name="messageType">Message type to register the handler for</param>
        /// <param name="eventHandler">Callback to be fired</param>
        public void RegisterEvent(string messageType, MessageCallback eventHandler)
        {
            lock (m_eventTable)
            {
                MessageCallback callback;
                if (m_eventTable.TryGetValue(messageType, out callback))
                    callback += eventHandler;
                else
                    m_eventTable.Add(messageType, eventHandler);
            }
        }

        /// <summary>
        /// Unregister an event handler
        /// </summary>
        /// <param name="messageType">Message type to unregister the handler for</param>
        /// <param name="eventHandler">Callback to be unregistered</param>
        public void UnregisterEvent(string messageType, MessageCallback eventHandler)
        {
            lock (m_eventTable)
            {
                MessageCallback callback;
                if (m_eventTable.TryGetValue(messageType, out callback))
                {
                    if (callback != null)
                        callback -= eventHandler;

                    if (callback == null || callback.GetInvocationList().Length == 0)
                        m_eventTable.Remove(messageType);
                }
            }
        }

        /// <summary>
        /// Fire the events registered for this message type asynchronously
        /// </summary>
        /// <param name="incomingMessage">The incoming message</param>
        internal void BeginRaiseEvent(OSDMap incomingMessage, WSAgent agent)
        {
            MessageCallback callback;

            if (m_eventTable.TryGetValue(incomingMessage["Type"].AsString(), out callback) && callback != null)
            {
                while (!m_eventPool.WaitOne(Simian.LONG_SLEEP_INTERVAL))
                    m_scheduler.ThreadKeepAlive();

                MessageCallbackWrapper wrapper = new MessageCallbackWrapper { Callback = callback, Message = incomingMessage, Agent = agent };
                m_scheduler.FireAndForget(MessageDelegate, wrapper);
            }
            else
            {
                m_log.Debug("No handler registered for message type \"" + incomingMessage["Type"].AsString() + "\"");
            }
        }

        private void MessageDelegate(object state)
        {
            MessageCallbackWrapper wrapper = (MessageCallbackWrapper)state;

            try
            {
                wrapper.Callback(wrapper.Agent, wrapper.Message);
            }
            catch (Exception ex)
            {
                m_log.Error("Async Message Event Handler: " + ex.Message, ex);
            }

            m_eventPool.Release();
        }
    }
}
