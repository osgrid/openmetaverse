/*
 * Copyright (c) Open Metaverse Foundation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;
using System.Collections.Generic;
using System.Threading;
using log4net;
using OpenMetaverse.Packets;

namespace Simian.Protocols.Linden
{
    /// <summary>
    /// This is triggered whenever a packet of a registered type is received
    /// </summary>
    public delegate void PacketCallback(Packet packet, LLAgent agent);

    /// <summary>
    /// Registers, unregisters, and fires events generated by incoming packets
    /// </summary>
    public class PacketEventDictionary
    {
        /// <summary>
        /// Object that is passed to worker threads in the ThreadPool for
        /// firing packet callbacks
        /// </summary>
        private struct PacketCallbackWrapper
        {
            /// <summary>Callback to fire for this packet</summary>
            public PacketCallback Callback;
            /// <summary>The packet that needs to be processed</summary>
            public IncomingPacket IncomingPacket;
        }

        private static readonly ILog m_log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name);

        /// <summary>Maps event types to callbacks</summary>
        private Dictionary<PacketType, PacketCallback> m_eventTable = new Dictionary<PacketType, PacketCallback>();
        /// <summary>Used to asynchronously schedule events</summary>
        private IScheduler m_scheduler;

        /// <summary>
        /// Default constructor
        /// </summary>
        public PacketEventDictionary(IScheduler scheduler)
        {
            m_scheduler = scheduler;
        }

        /// <summary>
        /// Register an event handler
        /// </summary>
        /// <remarks>Use PacketType.Default to fire this event on every 
        /// incoming packet</remarks>
        /// <param name="packetType">Packet type to register the handler for</param>
        /// <param name="eventHandler">Callback to be fired</param>
        public void RegisterEvent(PacketType packetType, PacketCallback eventHandler)
        {
            lock (m_eventTable)
            {
                PacketCallback callback;
                if (m_eventTable.TryGetValue(packetType, out callback))
                    callback += eventHandler;
                else
                    m_eventTable.Add(packetType, eventHandler);
            }
        }

        /// <summary>
        /// Unregister an event handler
        /// </summary>
        /// <param name="packetType">Packet type to unregister the handler for</param>
        /// <param name="eventHandler">Callback to be unregistered</param>
        public void UnregisterEvent(PacketType packetType, PacketCallback eventHandler)
        {
            lock (m_eventTable)
            {
                PacketCallback callback;
                if (m_eventTable.TryGetValue(packetType, out callback))
                {
                    if (callback != null)
                        callback -= eventHandler;

                    if (callback == null || callback.GetInvocationList().Length == 0)
                        m_eventTable.Remove(packetType);
                }
            }
        }

        /// <summary>
        /// Fire the events registered for this packet type asynchronously
        /// </summary>
        /// <param name="incomingPacket">The incoming packet</param>
        internal void BeginRaiseEvent(IncomingPacket incomingPacket)
        {
            PacketCallback callback;
            if (m_eventTable.TryGetValue(incomingPacket.Packet.Type, out callback) && callback != null)
            {
                PacketCallbackWrapper wrapper = new PacketCallbackWrapper { Callback = callback, IncomingPacket = incomingPacket };
                m_scheduler.FireAndForget(PacketDelegate, wrapper);
            }
            else
            {
                m_log.Debug("No handler registered for packet " + incomingPacket.Packet.Type);
            }
        }

        private void PacketDelegate(object state)
        {
            PacketCallbackWrapper wrapper = (PacketCallbackWrapper)state;
            IncomingPacket incomingPacket = wrapper.IncomingPacket;
            LLAgent agent = wrapper.IncomingPacket.Agent;

            if (!agent.IsConnected)
            {
                m_log.DebugFormat("Dropping incoming {0} packet (#{1}) for dead client {2}",
                    incomingPacket.Packet.Type, incomingPacket.Packet.Header.ID, agent.ID);
                return;
            }

            try
            {
                wrapper.Callback(incomingPacket.Packet, agent);
            }
            catch (Exception ex)
            {
                m_log.Error("Async Packet Event Handler: " + ex.Message, ex);
            }

            // TODO: Optionally log timing info for this packet
            int now = Environment.TickCount & Int32.MaxValue;

            int recvTime = incomingPacket.StartedHandling - incomingPacket.Received;
            if (recvTime > 1000)
            {
                m_log.Warn("Spent " + recvTime + "ms receiving " + incomingPacket.Packet.Type +
                    " packet for " + wrapper.IncomingPacket.Agent);
            }

            int processTime = now - incomingPacket.StartedHandling;
            if (processTime > 1000)
            {
                m_log.Warn("Spent " + processTime + "ms processing " + incomingPacket.Packet.Type +
                    " packet for " + incomingPacket.Agent);
            }
        }
    }
}
